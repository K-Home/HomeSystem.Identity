// <auto-generated />
using System;
using HomeSystem.Services.Identity.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeSystem.Services.Identity.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20190123212744_AddedSessionAndSecuredOperation")]
    partial class AddedSessionAndSecuredOperation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeSystem.Services.Identity.Domain.Aggregates.OneTimeSecuredOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ConsumedAt");

                    b.Property<string>("ConsumerIpAddress");

                    b.Property<string>("ConsumerUserAgent");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Expiry");

                    b.Property<string>("RequesterIpAddress");

                    b.Property<string>("RequesterUserAgent");

                    b.Property<string>("Token");

                    b.Property<string>("Type");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("OneTimeSecuredOperations");
                });

            modelBuilder.Entity("HomeSystem.Services.Identity.Domain.Aggregates.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Revoked")
                        .HasColumnName("Revoked");

                    b.Property<DateTime?>("RevokedAt");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("Token");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HomeSystem.Services.Identity.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("AggregateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("Role");

                    b.Property<bool>("TwoFactorAuthentication")
                        .HasColumnName("TwoFactorAuthentication")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("AggregateId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HomeSystem.Services.Identity.Domain.Aggregates.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Destroyed");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Key");

                    b.Property<Guid?>("ParentId");

                    b.Property<bool>("Refreshed");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UserAgent");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("HomeSystem.Services.Identity.Domain.Aggregates.RefreshToken", b =>
                {
                    b.HasOne("HomeSystem.Services.Identity.Domain.Aggregates.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeSystem.Services.Identity.Domain.Aggregates.User", b =>
                {
                    b.OwnsOne("HomeSystem.Services.Identity.Domain.ValueObjects.UserAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("State");

                            b1.Property<string>("Street");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("Users");

                            b1.HasOne("HomeSystem.Services.Identity.Domain.Aggregates.User")
                                .WithOne("Address")
                                .HasForeignKey("HomeSystem.Services.Identity.Domain.ValueObjects.UserAddress", "UserAggregateId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("HomeSystem.Services.Identity.Domain.Aggregates.UserSession", b =>
                {
                    b.HasOne("HomeSystem.Services.Identity.Domain.Aggregates.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
